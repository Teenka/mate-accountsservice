/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_user_MARSHAL_H__
#define __dbus_glib_marshal_user_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* NONE:STRING,POINTER */
extern void dbus_glib_marshal_user_VOID__STRING_POINTER (GClosure     *closure,
                                                         GValue       *return_value,
                                                         guint         n_param_values,
                                                         const GValue *param_values,
                                                         gpointer      invocation_hint,
                                                         gpointer      marshal_data);
void
dbus_glib_marshal_user_VOID__STRING_POINTER (GClosure     *closure,
                                             GValue       *return_value G_GNUC_UNUSED,
                                             guint         n_param_values,
                                             const GValue *param_values,
                                             gpointer      invocation_hint G_GNUC_UNUSED,
                                             gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     arg_2,
                                                     gpointer     data2);
  register GMarshalFunc_VOID__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_user_NONE__STRING_POINTER	dbus_glib_marshal_user_VOID__STRING_POINTER

/* NONE:BOOLEAN,POINTER */
extern void dbus_glib_marshal_user_VOID__BOOLEAN_POINTER (GClosure     *closure,
                                                          GValue       *return_value,
                                                          guint         n_param_values,
                                                          const GValue *param_values,
                                                          gpointer      invocation_hint,
                                                          gpointer      marshal_data);
void
dbus_glib_marshal_user_VOID__BOOLEAN_POINTER (GClosure     *closure,
                                              GValue       *return_value G_GNUC_UNUSED,
                                              guint         n_param_values,
                                              const GValue *param_values,
                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                              gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOOLEAN_POINTER) (gpointer     data1,
                                                      gboolean     arg_1,
                                                      gpointer     arg_2,
                                                      gpointer     data2);
  register GMarshalFunc_VOID__BOOLEAN_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOOLEAN_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boolean (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_user_NONE__BOOLEAN_POINTER	dbus_glib_marshal_user_VOID__BOOLEAN_POINTER

/* NONE:STRING,STRING,POINTER */
extern void dbus_glib_marshal_user_VOID__STRING_STRING_POINTER (GClosure     *closure,
                                                                GValue       *return_value,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint,
                                                                gpointer      marshal_data);
void
dbus_glib_marshal_user_VOID__STRING_STRING_POINTER (GClosure     *closure,
                                                    GValue       *return_value G_GNUC_UNUSED,
                                                    guint         n_param_values,
                                                    const GValue *param_values,
                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                    gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     arg_3,
                                                            gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_user_NONE__STRING_STRING_POINTER	dbus_glib_marshal_user_VOID__STRING_STRING_POINTER

/* NONE:INT,POINTER */
extern void dbus_glib_marshal_user_VOID__INT_POINTER (GClosure     *closure,
                                                      GValue       *return_value,
                                                      guint         n_param_values,
                                                      const GValue *param_values,
                                                      gpointer      invocation_hint,
                                                      gpointer      marshal_data);
void
dbus_glib_marshal_user_VOID__INT_POINTER (GClosure     *closure,
                                          GValue       *return_value G_GNUC_UNUSED,
                                          guint         n_param_values,
                                          const GValue *param_values,
                                          gpointer      invocation_hint G_GNUC_UNUSED,
                                          gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__INT_POINTER) (gpointer     data1,
                                                  gint         arg_1,
                                                  gpointer     arg_2,
                                                  gpointer     data2);
  register GMarshalFunc_VOID__INT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__INT_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_int (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_user_NONE__INT_POINTER	dbus_glib_marshal_user_VOID__INT_POINTER

G_END_DECLS

#endif /* __dbus_glib_marshal_user_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_user_methods[] = {
  { (GCallback) user_set_user_name, dbus_glib_marshal_user_NONE__STRING_POINTER, 0 },
  { (GCallback) user_set_real_name, dbus_glib_marshal_user_NONE__STRING_POINTER, 54 },
  { (GCallback) user_set_email, dbus_glib_marshal_user_NONE__STRING_POINTER, 108 },
  { (GCallback) user_set_language, dbus_glib_marshal_user_NONE__STRING_POINTER, 160 },
  { (GCallback) user_set_x_session, dbus_glib_marshal_user_NONE__STRING_POINTER, 218 },
  { (GCallback) user_set_location, dbus_glib_marshal_user_NONE__STRING_POINTER, 277 },
  { (GCallback) user_set_home_directory, dbus_glib_marshal_user_NONE__STRING_POINTER, 335 },
  { (GCallback) user_set_shell, dbus_glib_marshal_user_NONE__STRING_POINTER, 397 },
  { (GCallback) user_set_icon_file, dbus_glib_marshal_user_NONE__STRING_POINTER, 449 },
  { (GCallback) user_set_locked, dbus_glib_marshal_user_NONE__BOOLEAN_POINTER, 507 },
  { (GCallback) user_set_account_type, dbus_glib_marshal_user_NONE__INT_POINTER, 561 },
  { (GCallback) user_set_password_mode, dbus_glib_marshal_user_NONE__INT_POINTER, 625 },
  { (GCallback) user_set_password, dbus_glib_marshal_user_NONE__STRING_STRING_POINTER, 683 },
  { (GCallback) user_set_automatic_login, dbus_glib_marshal_user_NONE__BOOLEAN_POINTER, 750 },
};

const DBusGObjectInfo dbus_glib_user_object_info = {  1,
  dbus_glib_user_methods,
  14,
"org.freedesktop.MateAccounts.User\0SetUserName\0A\0name\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetRealName\0A\0name\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetEmail\0A\0email\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetLanguage\0A\0language\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetXSession\0A\0x_session\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetLocation\0A\0location\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetHomeDirectory\0A\0homedir\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetShell\0A\0shell\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetIconFile\0A\0filename\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetLocked\0A\0locked\0I\0b\0\0org.freedesktop.MateAccounts.User\0SetAccountType\0A\0accountType\0I\0i\0\0org.freedesktop.MateAccounts.User\0SetPasswordMode\0A\0mode\0I\0i\0\0org.freedesktop.MateAccounts.User\0SetPassword\0A\0password\0I\0s\0hint\0I\0s\0\0org.freedesktop.MateAccounts.User\0SetAutomaticLogin\0A\0enabled\0I\0b\0\0\0",
"org.freedesktop.MateAccounts.User\0Changed\0\0",
"org.freedesktop.MateAccounts.User\0Uid\0uid\0read\0org.freedesktop.MateAccounts.User\0UserName\0user_name\0read\0org.freedesktop.MateAccounts.User\0RealName\0real_name\0read\0org.freedesktop.MateAccounts.User\0AccountType\0account_type\0read\0org.freedesktop.MateAccounts.User\0HomeDirectory\0home_directory\0read\0org.freedesktop.MateAccounts.User\0Shell\0shell\0read\0org.freedesktop.MateAccounts.User\0Email\0email\0read\0org.freedesktop.MateAccounts.User\0Language\0language\0read\0org.freedesktop.MateAccounts.User\0XSession\0x_session\0read\0org.freedesktop.MateAccounts.User\0Location\0location\0read\0org.freedesktop.MateAccounts.User\0LoginFrequency\0login_frequency\0read\0org.freedesktop.MateAccounts.User\0IconFile\0icon_file\0read\0org.freedesktop.MateAccounts.User\0Locked\0locked\0read\0org.freedesktop.MateAccounts.User\0PasswordMode\0password_mode\0read\0org.freedesktop.MateAccounts.User\0PasswordHint\0password_hint\0read\0org.freedesktop.MateAccounts.User\0AutomaticLogin\0automatic_login\0read\0org.freedesktop.MateAccounts.User\0SystemAccount\0system_account\0read\0\0"
};

